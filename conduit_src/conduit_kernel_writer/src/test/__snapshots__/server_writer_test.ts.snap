// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`function with type return returns none 1`] = `[Error: Within function funk: Error: Function does nothing when it should return a type]`;

exports[`function with void returns type 1`] = `[Error: Within function funk: Error: Returning something when you need to return nothing]`;

exports[`inserting struct containing struct array: main files 1`] = `
Array [
  Object {
    "content": "
                            #![allow(non_snake_case)]
                            #![allow(non_camel_case_types)]
                            #![allow(redundant_semicolon)]
                            #![allow(unused_variables)]
                            #![allow(dead_code)]
                            #![allow(unused_imports)]
                            use tokio_postgres::{NoTls, Client};
                            use actix_web::{web, App, HttpResponse, HttpServer, Responder};
                            use actix_rt::System;
                            use std::env;
                            use serde::{Deserialize, Serialize};
                            use tokio_postgres::error::{Error};
                            use std::collections::HashMap;
                
                
                            struct AppData {
                                client: Client,
insert_executable: Vec<Op>
                            }
                            
                            #[derive(Serialize, Deserialize)]
                            struct City {
                                name: String,
                                location: i32
                            }
                            
                            // STRUCTS
                            
            #[derive(Serialize, Deserialize, Clone)]
            struct simple {
                data: String,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct wrapper {
                innard: Vec<simple>,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore_innard;
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore {
                innard: querySpec_wrapStore_innard
            }
            
                            // INTERPRETERS
                            
    async fn query_interpreter_wrapStore(querySpec: &querySpec_wrapStore, client: &Client) -> Result<Vec<wrapper>, Error> {
        
    // Gettting all wrapper
    let mut allwrapper1 = client.query(\\"select * from wrapStore \\", &[]).await?;

    
    // Gettting all simple
    let mut allsimple6 = client.query(\\"select * from wrapStore_innard WHERE conduit_entity_id in (select right_ptr from rel_wrapStore_wrapper_and_simple)\\", &[]).await?;

    

    let mut allsimple3 = Vec::with_capacity(allsimple6.len());

    while let Some(row5) = allsimple6.pop() {
        let simpleEntityId7 = row5.get(\\"conduit_entity_id\\");
        
        allsimple3.push(simple {
            data: row5.get(\\"data\\"),
            conduit_entity_id: Some(simpleEntityId7)
        })
    }

    

                let mut entityIdTosimple4: HashMap<i32, simple> = HashMap::with_capacity(allsimple3.len());
                while let Some(row8) = allsimple3.pop() {
                    entityIdTosimple4.insert(row8.conduit_entity_id.unwrap(), row8);
                }
                

                let mut lr9 = client.query(\\"select left_ptr, right_ptr from rel_wrapStore_wrapper_and_simple\\", &[]).await?;
                let mut lrmap10: HashMap<i32, Vec<i32>> = HashMap::new();
                while let Some(lrrow11) = lr9.pop() {
                    let l12 = lrrow11.get(\\"left_ptr\\");
                    lrmap10.entry(l12)
                        .and_modify(|e13| { e13.push(lrrow11.get(\\"right_ptr\\")) })
                        .or_insert(vec![lrrow11.get(\\"right_ptr\\")]);
                }

                

    let mut out = Vec::with_capacity(allwrapper1.len());

    while let Some(row0) = allwrapper1.pop() {
        let wrapperEntityId2 = row0.get(\\"conduit_entity_id\\");
        
                // Extracting simples
                let empty17 = Vec::with_capacity(0);
                let entriessimple14 = match lrmap10.remove(&wrapperEntityId2) {
                    Some(ptrs) => ptrs,
                    None => empty17
                };

                let mut instancessimple15: Vec<simple> = Vec::with_capacity(entriessimple14.len());

                for child16 in entriessimple14 {
                    match entityIdTosimple4.remove(&child16) {
                        Some(real) => instancessimple15.push(real),
                        None => panic!(\\"could not find expected simple\\")
                    };
                }
                
        out.push(wrapper {
            innard: instancessimple15,
            conduit_entity_id: Some(wrapperEntityId2)
        })
    }

    
        return Ok(out);
    }
    

            async fn insert_wrapStore(client: &Client, body: &wrapper) -> Result<(), Error> {
                
                let mut vec_ret0: Vec<i32> = Vec::new();
                for row1 in &body.innard {
                    let ret0 = client.query(\\"insert into wrapStore_innard(data) values ($1) RETURNING conduit_entity_id\\", &[&row1.data]).await?;
                    vec_ret0.push(ret0[0].get(0));
                }
                
let ret3 = client.query(\\"insert into wrapStore default values RETURNING conduit_entity_id\\", &[]).await?;


                let ent4: i32 = ret3[0].get(0);
                while let Some(child_id) = vec_ret0.pop() {
                    client.query(\\"insert into rel_wrapStore_wrapper_and_simple(left_ptr, right_ptr) values ($1, $2)\\", &[&ent4, &child_id]).await?;
                }
                    
                
                return Ok(());
            }
            
                            // OP INTERPRETER
                            

    #[derive(Serialize, Deserialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum Op {
        storeInsertPreviouswrapStore,
storeQuerywrapStore,
returnVariable(usize),
returnPrevious,
savePrevious,
echoVariable(usize),
simpleFieldAccess(simpleField),
wrapperFieldAccess(wrapperField)
    }

    #[derive(Serialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum AnyType<'exec> {
        None,
Err( String),
double(&'exec f64),
Manydouble(&'exec Vec<f64>),
Optionaldouble(&'exec Option<f64>),
float(&'exec f32),
Manyfloat(&'exec Vec<f32>),
Optionalfloat(&'exec Option<f32>),
int32(&'exec i32),
Manyint32(&'exec Vec<i32>),
Optionalint32(&'exec Option<i32>),
int64(&'exec i64),
Manyint64(&'exec Vec<i64>),
Optionalint64(&'exec Option<i64>),
uint32(&'exec i32),
Manyuint32(&'exec Vec<i32>),
Optionaluint32(&'exec Option<i32>),
uint64(&'exec i64),
Manyuint64(&'exec Vec<i64>),
Optionaluint64(&'exec Option<i64>),
bool(&'exec bool),
Manybool(&'exec Vec<bool>),
Optionalbool(&'exec Option<bool>),
string(&'exec String),
Manystring(&'exec Vec<String>),
Optionalstring(&'exec Option<String>),
bytes(&'exec Vec<u8>),
Manybytes(&'exec Vec<Vec<u8>>),
Optionalbytes(&'exec Option<Vec<u8>>),
simple(&'exec simple),
Manysimple(&'exec Vec<simple>),
Optionalsimple(&'exec Option<simple>),
wrapper(&'exec wrapper),
Manywrapper(&'exec Vec<wrapper>),
Optionalwrapper(&'exec Option<wrapper>),
wrapStoreResult( Vec<wrapper>),
querySpec_wrapStore_innard(&'exec querySpec_wrapStore_innard),
ManyquerySpec_wrapStore_innard(&'exec Vec<querySpec_wrapStore_innard>),
OptionalquerySpec_wrapStore_innard(&'exec Option<querySpec_wrapStore_innard>),
querySpec_wrapStore(&'exec querySpec_wrapStore),
ManyquerySpec_wrapStore(&'exec Vec<querySpec_wrapStore>),
OptionalquerySpec_wrapStore(&'exec Option<querySpec_wrapStore>)
    }


    async fn conduit_byte_code_interpreter<'a>(client: &Client, state: &'a mut Vec<AnyType<'a>>, ops: &Vec<Op>) -> impl Responder {
        let mut prev: AnyType= AnyType::None;
        for o in ops {
            prev = match o {
                Op::storeInsertPreviouswrapStore => {
                        match prev {
                            AnyType::wrapper(r) => {
                                match insert_wrapStore(&client, &r).await {
                                    Ok(()) => AnyType::None,
                                    Err(err) => AnyType::Err(err.to_string())
                                }
                            },
                            _ => {
                                println!(\\"invalid insertion type\\");
                                return HttpResponse::BadRequest().finish();
                            }
                        }
                    },
Op::storeQuerywrapStore => {
                        
                            let spec = querySpec_wrapStore {
            innard: querySpec_wrapStore_innard
        };
                            match query_interpreter_wrapStore(&spec, &client).await {
                                Ok(out) => AnyType::wrapStoreResult(out),
                                Err(err) => AnyType::Err(err.to_string())
                            }
                        
                    },
Op::returnVariable(op_param) => {
                        
                    match state.get(*op_param) {
                        Some(data) => match data {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            ,
                        None => {
                            println!(\\"attempting to return a value that doesn't exist\\");
                            return HttpResponse::BadRequest().finish();
                        }
                    }
                    },
Op::returnPrevious => {
                        
                    match prev {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            
                    },
Op::savePrevious => {
                        state.push(prev); AnyType::None
                    },
Op::echoVariable(op_param) => {
                        match state.get(*op_param) {
                        Some(d) => d.clone(),
                        None => AnyType::Err(\\"Echoing variable that does not exist\\".to_string())
                    }
                    },
Op::simpleFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::simple(inside) => match *op_param {
                                    simpleField::simpledataFieldRef => AnyType::string(&inside.data)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    },
Op::wrapperFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::wrapper(inside) => match *op_param {
                                    wrapperField::wrapperinnardFieldRef => AnyType::Manysimple(&inside.innard)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    }
            };

            match prev {
                AnyType::Err(e) => {
                    println!(\\"Error: {}\\", e);
                    return HttpResponse::BadRequest().finish();
                },
                _ => {}  
            };
        }
        return HttpResponse::Ok().json(AnyType::None);

    }

    
                            // FUNCTIONS
                            
        
        async fn insert(data: web::Data<AppData>, input: web::Json<wrapper>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
        let innerInput = input.into_inner();
        state.push(AnyType::wrapper(&innerInput));
        
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.insert_executable).await;
        }
        
                    
                            //ADDITIONAL
                            
                        #[derive(Serialize, Deserialize, Clone)]
                        enum simpleField {
                            simpledataFieldRef
                        }
                        

                        #[derive(Serialize, Deserialize, Clone)]
                        enum wrapperField {
                            wrapperinnardFieldRef
                        }
                        
                            #[actix_rt::main]
                            async fn main() -> std::io::Result<()> {
                                HttpServer::new(|| {
                                    App::new()
                                        .data_factory(|| make_app_data())
                                        .route(\\"/\\", web::get().to(index))
                                        .route(\\"/insert\\", web::post().to(insert))
                                })
                                .bind(\\"0.0.0.0:8080\\")?
                                .run()
                                .await
                            }
                    
                            async fn index(data: web::Data<AppData>) -> impl Responder {
                                let mut rows = match data.client.query(\\"select name, location from cities\\", &[]).await {
                                    Ok(rows) => rows,
                                    Err(err) => panic!(\\"didn't succeed: {}\\", err)
                                };
                            
                                let mut out = Vec::with_capacity(rows.len());
                            
                                while let Some(row) = rows.pop() {
                                    out.push(City {
                                        name: row.get(0),
                                        location: row.get(1)
                                    })
                                }
                                return HttpResponse::Ok().json(out);
                            }
                
                            async fn make_app_data() -> Result<AppData, ()> {
                                let host = match env::var(\\"POSTGRES_SERVICE_HOST\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres location: {}\\", e)
                                };
                                let pwd = match env::var(\\"POSTGRES_PASSWORD\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres password: {}\\", e)
                                };
                            
                                let (client, connection) = match tokio_postgres::connect(&format!(\\"host={} user=postgres password={}\\", host, pwd), NoTls).await {
                                    Ok(out) => out,
                                    Err(e) => panic!(\\"couldn't create connection: {}\\", e)
                                };
                                
                                // The connection object performs the actual communication with the database,
                                // so spawn it off to run on its own.
                                actix_rt::spawn(async move {
                                    if let Err(e) = connection.await {
                                        eprintln!(\\"connection error: {}\\", e);
                                    }
                                });
                                
                                
                                return Ok(AppData {
                                    client: client,
                                    insert_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"echoVariable\\",
    \\"data\\": 0
  },
  {
    \\"kind\\": \\"storeInsertPreviouswrapStore\\"
  }
]\\"#####).unwrap()
                                });
                            }
                            
                        ",
    "name": ".deploy/main/src/main.rs",
  },
]
`;

exports[`inserting struct containing struct array: main files 2`] = `
Array [
  Object {
    "content": "
                            #![allow(non_snake_case)]
                            #![allow(non_camel_case_types)]
                            #![allow(redundant_semicolon)]
                            #![allow(unused_variables)]
                            #![allow(dead_code)]
                            #![allow(unused_imports)]
                            use tokio_postgres::{NoTls, Client};
                            use actix_web::{web, App, HttpResponse, HttpServer, Responder};
                            use actix_rt::System;
                            use std::env;
                            use serde::{Deserialize, Serialize};
                            use tokio_postgres::error::{Error};
                            use std::collections::HashMap;
                
                
                            struct AppData {
                                client: Client,
insert_executable: Vec<Op>,get_executable: Vec<Op>
                            }
                            
                            #[derive(Serialize, Deserialize)]
                            struct City {
                                name: String,
                                location: i32
                            }
                            
                            // STRUCTS
                            
            #[derive(Serialize, Deserialize, Clone)]
            struct simple {
                data: String,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct wrapper {
                innard: Vec<simple>,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore_innard;
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore {
                innard: querySpec_wrapStore_innard
            }
            
                            // INTERPRETERS
                            
    async fn query_interpreter_wrapStore(querySpec: &querySpec_wrapStore, client: &Client) -> Result<Vec<wrapper>, Error> {
        
    // Gettting all wrapper
    let mut allwrapper1 = client.query(\\"select * from wrapStore \\", &[]).await?;

    
    // Gettting all simple
    let mut allsimple6 = client.query(\\"select * from wrapStore_innard WHERE conduit_entity_id in (select right_ptr from rel_wrapStore_wrapper_and_simple)\\", &[]).await?;

    

    let mut allsimple3 = Vec::with_capacity(allsimple6.len());

    while let Some(row5) = allsimple6.pop() {
        let simpleEntityId7 = row5.get(\\"conduit_entity_id\\");
        
        allsimple3.push(simple {
            data: row5.get(\\"data\\"),
            conduit_entity_id: Some(simpleEntityId7)
        })
    }

    

                let mut entityIdTosimple4: HashMap<i32, simple> = HashMap::with_capacity(allsimple3.len());
                while let Some(row8) = allsimple3.pop() {
                    entityIdTosimple4.insert(row8.conduit_entity_id.unwrap(), row8);
                }
                

                let mut lr9 = client.query(\\"select left_ptr, right_ptr from rel_wrapStore_wrapper_and_simple\\", &[]).await?;
                let mut lrmap10: HashMap<i32, Vec<i32>> = HashMap::new();
                while let Some(lrrow11) = lr9.pop() {
                    let l12 = lrrow11.get(\\"left_ptr\\");
                    lrmap10.entry(l12)
                        .and_modify(|e13| { e13.push(lrrow11.get(\\"right_ptr\\")) })
                        .or_insert(vec![lrrow11.get(\\"right_ptr\\")]);
                }

                

    let mut out = Vec::with_capacity(allwrapper1.len());

    while let Some(row0) = allwrapper1.pop() {
        let wrapperEntityId2 = row0.get(\\"conduit_entity_id\\");
        
                // Extracting simples
                let empty17 = Vec::with_capacity(0);
                let entriessimple14 = match lrmap10.remove(&wrapperEntityId2) {
                    Some(ptrs) => ptrs,
                    None => empty17
                };

                let mut instancessimple15: Vec<simple> = Vec::with_capacity(entriessimple14.len());

                for child16 in entriessimple14 {
                    match entityIdTosimple4.remove(&child16) {
                        Some(real) => instancessimple15.push(real),
                        None => panic!(\\"could not find expected simple\\")
                    };
                }
                
        out.push(wrapper {
            innard: instancessimple15,
            conduit_entity_id: Some(wrapperEntityId2)
        })
    }

    
        return Ok(out);
    }
    

            async fn insert_wrapStore(client: &Client, body: &wrapper) -> Result<(), Error> {
                
                let mut vec_ret0: Vec<i32> = Vec::new();
                for row1 in &body.innard {
                    let ret0 = client.query(\\"insert into wrapStore_innard(data) values ($1) RETURNING conduit_entity_id\\", &[&row1.data]).await?;
                    vec_ret0.push(ret0[0].get(0));
                }
                
let ret3 = client.query(\\"insert into wrapStore default values RETURNING conduit_entity_id\\", &[]).await?;


                let ent4: i32 = ret3[0].get(0);
                while let Some(child_id) = vec_ret0.pop() {
                    client.query(\\"insert into rel_wrapStore_wrapper_and_simple(left_ptr, right_ptr) values ($1, $2)\\", &[&ent4, &child_id]).await?;
                }
                    
                
                return Ok(());
            }
            
                            // OP INTERPRETER
                            

    #[derive(Serialize, Deserialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum Op {
        storeInsertPreviouswrapStore,
storeQuerywrapStore,
returnVariable(usize),
returnPrevious,
savePrevious,
echoVariable(usize),
simpleFieldAccess(simpleField),
wrapperFieldAccess(wrapperField)
    }

    #[derive(Serialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum AnyType<'exec> {
        None,
Err( String),
double(&'exec f64),
Manydouble(&'exec Vec<f64>),
Optionaldouble(&'exec Option<f64>),
float(&'exec f32),
Manyfloat(&'exec Vec<f32>),
Optionalfloat(&'exec Option<f32>),
int32(&'exec i32),
Manyint32(&'exec Vec<i32>),
Optionalint32(&'exec Option<i32>),
int64(&'exec i64),
Manyint64(&'exec Vec<i64>),
Optionalint64(&'exec Option<i64>),
uint32(&'exec i32),
Manyuint32(&'exec Vec<i32>),
Optionaluint32(&'exec Option<i32>),
uint64(&'exec i64),
Manyuint64(&'exec Vec<i64>),
Optionaluint64(&'exec Option<i64>),
bool(&'exec bool),
Manybool(&'exec Vec<bool>),
Optionalbool(&'exec Option<bool>),
string(&'exec String),
Manystring(&'exec Vec<String>),
Optionalstring(&'exec Option<String>),
bytes(&'exec Vec<u8>),
Manybytes(&'exec Vec<Vec<u8>>),
Optionalbytes(&'exec Option<Vec<u8>>),
simple(&'exec simple),
Manysimple(&'exec Vec<simple>),
Optionalsimple(&'exec Option<simple>),
wrapper(&'exec wrapper),
Manywrapper(&'exec Vec<wrapper>),
Optionalwrapper(&'exec Option<wrapper>),
wrapStoreResult( Vec<wrapper>),
querySpec_wrapStore_innard(&'exec querySpec_wrapStore_innard),
ManyquerySpec_wrapStore_innard(&'exec Vec<querySpec_wrapStore_innard>),
OptionalquerySpec_wrapStore_innard(&'exec Option<querySpec_wrapStore_innard>),
querySpec_wrapStore(&'exec querySpec_wrapStore),
ManyquerySpec_wrapStore(&'exec Vec<querySpec_wrapStore>),
OptionalquerySpec_wrapStore(&'exec Option<querySpec_wrapStore>)
    }


    async fn conduit_byte_code_interpreter<'a>(client: &Client, state: &'a mut Vec<AnyType<'a>>, ops: &Vec<Op>) -> impl Responder {
        let mut prev: AnyType= AnyType::None;
        for o in ops {
            prev = match o {
                Op::storeInsertPreviouswrapStore => {
                        match prev {
                            AnyType::wrapper(r) => {
                                match insert_wrapStore(&client, &r).await {
                                    Ok(()) => AnyType::None,
                                    Err(err) => AnyType::Err(err.to_string())
                                }
                            },
                            _ => {
                                println!(\\"invalid insertion type\\");
                                return HttpResponse::BadRequest().finish();
                            }
                        }
                    },
Op::storeQuerywrapStore => {
                        
                            let spec = querySpec_wrapStore {
            innard: querySpec_wrapStore_innard
        };
                            match query_interpreter_wrapStore(&spec, &client).await {
                                Ok(out) => AnyType::wrapStoreResult(out),
                                Err(err) => AnyType::Err(err.to_string())
                            }
                        
                    },
Op::returnVariable(op_param) => {
                        
                    match state.get(*op_param) {
                        Some(data) => match data {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            ,
                        None => {
                            println!(\\"attempting to return a value that doesn't exist\\");
                            return HttpResponse::BadRequest().finish();
                        }
                    }
                    },
Op::returnPrevious => {
                        
                    match prev {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            
                    },
Op::savePrevious => {
                        state.push(prev); AnyType::None
                    },
Op::echoVariable(op_param) => {
                        match state.get(*op_param) {
                        Some(d) => d.clone(),
                        None => AnyType::Err(\\"Echoing variable that does not exist\\".to_string())
                    }
                    },
Op::simpleFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::simple(inside) => match *op_param {
                                    simpleField::simpledataFieldRef => AnyType::string(&inside.data)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    },
Op::wrapperFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::wrapper(inside) => match *op_param {
                                    wrapperField::wrapperinnardFieldRef => AnyType::Manysimple(&inside.innard)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    }
            };

            match prev {
                AnyType::Err(e) => {
                    println!(\\"Error: {}\\", e);
                    return HttpResponse::BadRequest().finish();
                },
                _ => {}  
            };
        }
        return HttpResponse::Ok().json(AnyType::None);

    }

    
                            // FUNCTIONS
                            
        
        async fn insert(data: web::Data<AppData>, input: web::Json<wrapper>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
        let innerInput = input.into_inner();
        state.push(AnyType::wrapper(&innerInput));
        
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.insert_executable).await;
        }
        


        
        async fn get(data: web::Data<AppData>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.get_executable).await;
        }
        
                    
                            //ADDITIONAL
                            
                        #[derive(Serialize, Deserialize, Clone)]
                        enum simpleField {
                            simpledataFieldRef
                        }
                        

                        #[derive(Serialize, Deserialize, Clone)]
                        enum wrapperField {
                            wrapperinnardFieldRef
                        }
                        
                            #[actix_rt::main]
                            async fn main() -> std::io::Result<()> {
                                HttpServer::new(|| {
                                    App::new()
                                        .data_factory(|| make_app_data())
                                        .route(\\"/\\", web::get().to(index))
                                        .route(\\"/insert\\", web::post().to(insert))
.route(\\"/get\\", web::get().to(get))
                                })
                                .bind(\\"0.0.0.0:8080\\")?
                                .run()
                                .await
                            }
                    
                            async fn index(data: web::Data<AppData>) -> impl Responder {
                                let mut rows = match data.client.query(\\"select name, location from cities\\", &[]).await {
                                    Ok(rows) => rows,
                                    Err(err) => panic!(\\"didn't succeed: {}\\", err)
                                };
                            
                                let mut out = Vec::with_capacity(rows.len());
                            
                                while let Some(row) = rows.pop() {
                                    out.push(City {
                                        name: row.get(0),
                                        location: row.get(1)
                                    })
                                }
                                return HttpResponse::Ok().json(out);
                            }
                
                            async fn make_app_data() -> Result<AppData, ()> {
                                let host = match env::var(\\"POSTGRES_SERVICE_HOST\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres location: {}\\", e)
                                };
                                let pwd = match env::var(\\"POSTGRES_PASSWORD\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres password: {}\\", e)
                                };
                            
                                let (client, connection) = match tokio_postgres::connect(&format!(\\"host={} user=postgres password={}\\", host, pwd), NoTls).await {
                                    Ok(out) => out,
                                    Err(e) => panic!(\\"couldn't create connection: {}\\", e)
                                };
                                
                                // The connection object performs the actual communication with the database,
                                // so spawn it off to run on its own.
                                actix_rt::spawn(async move {
                                    if let Err(e) = connection.await {
                                        eprintln!(\\"connection error: {}\\", e);
                                    }
                                });
                                
                                
                                return Ok(AppData {
                                    client: client,
                                    insert_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"echoVariable\\",
    \\"data\\": 0
  },
  {
    \\"kind\\": \\"storeInsertPreviouswrapStore\\"
  }
]\\"#####).unwrap(),
get_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"storeQuerywrapStore\\"
  },
  {
    \\"kind\\": \\"returnPrevious\\"
  }
]\\"#####).unwrap()
                                });
                            }
                            
                        ",
    "name": ".deploy/main/src/main.rs",
  },
]
`;

exports[`inserting struct containing struct array: postgres files 1`] = `
Array [
  Object {
    "content": "

                        CREATE TABLE cities (
                            name            varchar(80),
                            location        int
                        );
                
                        
    CREATE TABLE wrapStore_innard (
        data	text NOT NULL,
conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
PRIMARY KEY(conduit_entity_id)
    );

    CREATE TABLE wrapStore (
        conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
PRIMARY KEY(conduit_entity_id)
    );
                CREATE TABLE rel_wrapStore_wrapper_and_simple (
                    left_ptr INT,
                    right_ptr INT,
                    FOREIGN KEY(right_ptr) REFERENCES wrapStore_innard(conduit_entity_id),
                    FOREIGN KEY(left_ptr) REFERENCES wrapStore(conduit_entity_id)
                );
                        
                        
                        insert into cities(name, location)
                        values ('detroit', 12)",
    "name": ".deploy/postgres/startup/init.sql",
  },
]
`;

exports[`inserting struct containing struct array: postgres files 2`] = `
Array [
  Object {
    "content": "

                        CREATE TABLE cities (
                            name            varchar(80),
                            location        int
                        );
                
                        
    CREATE TABLE wrapStore_innard (
        data	text NOT NULL,
conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
PRIMARY KEY(conduit_entity_id)
    );

    CREATE TABLE wrapStore (
        conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
PRIMARY KEY(conduit_entity_id)
    );
                CREATE TABLE rel_wrapStore_wrapper_and_simple (
                    left_ptr INT,
                    right_ptr INT,
                    FOREIGN KEY(right_ptr) REFERENCES wrapStore_innard(conduit_entity_id),
                    FOREIGN KEY(left_ptr) REFERENCES wrapStore(conduit_entity_id)
                );
                        
                        
                        insert into cities(name, location)
                        values ('detroit', 12)",
    "name": ".deploy/postgres/startup/init.sql",
  },
]
`;

exports[`not returning anything 1`] = `[Error: Within function echosSingleton: Error: Function does nothing when it should return a type]`;

exports[`simple struct: main files 1`] = `
Array [
  Object {
    "content": "
                            #![allow(non_snake_case)]
                            #![allow(non_camel_case_types)]
                            #![allow(redundant_semicolon)]
                            #![allow(unused_variables)]
                            #![allow(dead_code)]
                            #![allow(unused_imports)]
                            use tokio_postgres::{NoTls, Client};
                            use actix_web::{web, App, HttpResponse, HttpServer, Responder};
                            use actix_rt::System;
                            use std::env;
                            use serde::{Deserialize, Serialize};
                            use tokio_postgres::error::{Error};
                            use std::collections::HashMap;
                
                
                            struct AppData {
                                client: Client,
insert_executable: Vec<Op>,get_executable: Vec<Op>
                            }
                            
                            #[derive(Serialize, Deserialize)]
                            struct City {
                                name: String,
                                location: i32
                            }
                            
                            // STRUCTS
                            
            #[derive(Serialize, Deserialize, Clone)]
            struct simple {
                data: f64,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_simpleStore;
            
                            // INTERPRETERS
                            
    async fn query_interpreter_simpleStore(querySpec: &querySpec_simpleStore, client: &Client) -> Result<Vec<simple>, Error> {
        
    // Gettting all simple
    let mut allsimple1 = client.query(\\"select * from simpleStore \\", &[]).await?;

    

    let mut out = Vec::with_capacity(allsimple1.len());

    while let Some(row0) = allsimple1.pop() {
        let simpleEntityId2 = row0.get(\\"conduit_entity_id\\");
        
        out.push(simple {
            data: row0.get(\\"data\\"),
            conduit_entity_id: Some(simpleEntityId2)
        })
    }

    
        return Ok(out);
    }
    

            async fn insert_simpleStore(client: &Client, body: &simple) -> Result<(), Error> {
                client.query(\\"insert into simpleStore(data) values ($1)\\", &[&body.data]).await?;
                return Ok(());
            }
            
                            // OP INTERPRETER
                            

    #[derive(Serialize, Deserialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum Op {
        storeInsertPrevioussimpleStore,
storeQuerysimpleStore,
returnVariable(usize),
returnPrevious,
savePrevious,
echoVariable(usize),
simpleFieldAccess(simpleField)
    }

    #[derive(Serialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum AnyType<'exec> {
        None,
Err( String),
double(&'exec f64),
Manydouble(&'exec Vec<f64>),
Optionaldouble(&'exec Option<f64>),
float(&'exec f32),
Manyfloat(&'exec Vec<f32>),
Optionalfloat(&'exec Option<f32>),
int32(&'exec i32),
Manyint32(&'exec Vec<i32>),
Optionalint32(&'exec Option<i32>),
int64(&'exec i64),
Manyint64(&'exec Vec<i64>),
Optionalint64(&'exec Option<i64>),
uint32(&'exec i32),
Manyuint32(&'exec Vec<i32>),
Optionaluint32(&'exec Option<i32>),
uint64(&'exec i64),
Manyuint64(&'exec Vec<i64>),
Optionaluint64(&'exec Option<i64>),
bool(&'exec bool),
Manybool(&'exec Vec<bool>),
Optionalbool(&'exec Option<bool>),
string(&'exec String),
Manystring(&'exec Vec<String>),
Optionalstring(&'exec Option<String>),
bytes(&'exec Vec<u8>),
Manybytes(&'exec Vec<Vec<u8>>),
Optionalbytes(&'exec Option<Vec<u8>>),
simple(&'exec simple),
Manysimple(&'exec Vec<simple>),
Optionalsimple(&'exec Option<simple>),
simpleStoreResult( Vec<simple>),
querySpec_simpleStore(&'exec querySpec_simpleStore),
ManyquerySpec_simpleStore(&'exec Vec<querySpec_simpleStore>),
OptionalquerySpec_simpleStore(&'exec Option<querySpec_simpleStore>)
    }


    async fn conduit_byte_code_interpreter<'a>(client: &Client, state: &'a mut Vec<AnyType<'a>>, ops: &Vec<Op>) -> impl Responder {
        let mut prev: AnyType= AnyType::None;
        for o in ops {
            prev = match o {
                Op::storeInsertPrevioussimpleStore => {
                        match prev {
                            AnyType::simple(r) => {
                                match insert_simpleStore(&client, &r).await {
                                    Ok(()) => AnyType::None,
                                    Err(err) => AnyType::Err(err.to_string())
                                }
                            },
                            _ => {
                                println!(\\"invalid insertion type\\");
                                return HttpResponse::BadRequest().finish();
                            }
                        }
                    },
Op::storeQuerysimpleStore => {
                        
                            let spec = querySpec_simpleStore;
                            match query_interpreter_simpleStore(&spec, &client).await {
                                Ok(out) => AnyType::simpleStoreResult(out),
                                Err(err) => AnyType::Err(err.to_string())
                            }
                        
                    },
Op::returnVariable(op_param) => {
                        
                    match state.get(*op_param) {
                        Some(data) => match data {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::simpleStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_simpleStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_simpleStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_simpleStore(output) => return HttpResponse::Ok().json(output)
            }
            ,
                        None => {
                            println!(\\"attempting to return a value that doesn't exist\\");
                            return HttpResponse::BadRequest().finish();
                        }
                    }
                    },
Op::returnPrevious => {
                        
                    match prev {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::simpleStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_simpleStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_simpleStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_simpleStore(output) => return HttpResponse::Ok().json(output)
            }
            
                    },
Op::savePrevious => {
                        state.push(prev); AnyType::None
                    },
Op::echoVariable(op_param) => {
                        match state.get(*op_param) {
                        Some(d) => d.clone(),
                        None => AnyType::Err(\\"Echoing variable that does not exist\\".to_string())
                    }
                    },
Op::simpleFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::simple(inside) => match *op_param {
                                    simpleField::simpledataFieldRef => AnyType::double(&inside.data)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    }
            };

            match prev {
                AnyType::Err(e) => {
                    println!(\\"Error: {}\\", e);
                    return HttpResponse::BadRequest().finish();
                },
                _ => {}  
            };
        }
        return HttpResponse::Ok().json(AnyType::None);

    }

    
                            // FUNCTIONS
                            
        
        async fn insert(data: web::Data<AppData>, input: web::Json<simple>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
        let innerInput = input.into_inner();
        state.push(AnyType::simple(&innerInput));
        
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.insert_executable).await;
        }
        


        
        async fn get(data: web::Data<AppData>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.get_executable).await;
        }
        
                    
                            //ADDITIONAL
                            
                        #[derive(Serialize, Deserialize, Clone)]
                        enum simpleField {
                            simpledataFieldRef
                        }
                        
                            #[actix_rt::main]
                            async fn main() -> std::io::Result<()> {
                                HttpServer::new(|| {
                                    App::new()
                                        .data_factory(|| make_app_data())
                                        .route(\\"/\\", web::get().to(index))
                                        .route(\\"/insert\\", web::post().to(insert))
.route(\\"/get\\", web::get().to(get))
                                })
                                .bind(\\"0.0.0.0:8080\\")?
                                .run()
                                .await
                            }
                    
                            async fn index(data: web::Data<AppData>) -> impl Responder {
                                let mut rows = match data.client.query(\\"select name, location from cities\\", &[]).await {
                                    Ok(rows) => rows,
                                    Err(err) => panic!(\\"didn't succeed: {}\\", err)
                                };
                            
                                let mut out = Vec::with_capacity(rows.len());
                            
                                while let Some(row) = rows.pop() {
                                    out.push(City {
                                        name: row.get(0),
                                        location: row.get(1)
                                    })
                                }
                                return HttpResponse::Ok().json(out);
                            }
                
                            async fn make_app_data() -> Result<AppData, ()> {
                                let host = match env::var(\\"POSTGRES_SERVICE_HOST\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres location: {}\\", e)
                                };
                                let pwd = match env::var(\\"POSTGRES_PASSWORD\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres password: {}\\", e)
                                };
                            
                                let (client, connection) = match tokio_postgres::connect(&format!(\\"host={} user=postgres password={}\\", host, pwd), NoTls).await {
                                    Ok(out) => out,
                                    Err(e) => panic!(\\"couldn't create connection: {}\\", e)
                                };
                                
                                // The connection object performs the actual communication with the database,
                                // so spawn it off to run on its own.
                                actix_rt::spawn(async move {
                                    if let Err(e) = connection.await {
                                        eprintln!(\\"connection error: {}\\", e);
                                    }
                                });
                                
                                
                                return Ok(AppData {
                                    client: client,
                                    insert_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"echoVariable\\",
    \\"data\\": 0
  },
  {
    \\"kind\\": \\"storeInsertPrevioussimpleStore\\"
  }
]\\"#####).unwrap(),
get_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"storeQuerysimpleStore\\"
  },
  {
    \\"kind\\": \\"returnPrevious\\"
  }
]\\"#####).unwrap()
                                });
                            }
                            
                        ",
    "name": ".deploy/main/src/main.rs",
  },
]
`;

exports[`simple struct: postgres files 1`] = `
Array [
  Object {
    "content": "

                        CREATE TABLE cities (
                            name            varchar(80),
                            location        int
                        );
                
                        
    CREATE TABLE simpleStore (
        data	double precision NOT NULL,
conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
PRIMARY KEY(conduit_entity_id)
    );
                        
                        
                        insert into cities(name, location)
                        values ('detroit', 12)",
    "name": ".deploy/postgres/startup/init.sql",
  },
]
`;

exports[`struct containing struct containing primitive array: main files 1`] = `
Array [
  Object {
    "content": "
                            #![allow(non_snake_case)]
                            #![allow(non_camel_case_types)]
                            #![allow(redundant_semicolon)]
                            #![allow(unused_variables)]
                            #![allow(dead_code)]
                            #![allow(unused_imports)]
                            use tokio_postgres::{NoTls, Client};
                            use actix_web::{web, App, HttpResponse, HttpServer, Responder};
                            use actix_rt::System;
                            use std::env;
                            use serde::{Deserialize, Serialize};
                            use tokio_postgres::error::{Error};
                            use std::collections::HashMap;
                
                
                            struct AppData {
                                client: Client,
insert_executable: Vec<Op>,get_executable: Vec<Op>
                            }
                            
                            #[derive(Serialize, Deserialize)]
                            struct City {
                                name: String,
                                location: i32
                            }
                            
                            // STRUCTS
                            
            #[derive(Serialize, Deserialize, Clone)]
            struct simple {
                data: Vec<String>,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct wrapper {
                innard: simple,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore_innard;
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore {
                innard: querySpec_wrapStore_innard
            }
            
                            // INTERPRETERS
                            
    async fn query_interpreter_wrapStore(querySpec: &querySpec_wrapStore, client: &Client) -> Result<Vec<wrapper>, Error> {
        
    // Gettting all wrapper
    let mut allwrapper1 = client.query(\\"select * from wrapStore \\", &[]).await?;

    
    // Gettting all simple
    let mut allsimple5 = client.query(\\"select * from wrapStore_innard WHERE conduit_entity_id in (select innard_ptr from wrapStore)\\", &[]).await?;

    

    let mut allsimple3 = Vec::with_capacity(allsimple5.len());

    while let Some(row4) = allsimple5.pop() {
        let simpleEntityId6 = row4.get(\\"conduit_entity_id\\");
        
        allsimple3.push(simple {
            data: row4.get(\\"data\\"),
            conduit_entity_id: Some(simpleEntityId6)
        })
    }

    

                    let mut entityIdTosimple7: HashMap<i32, simple> = HashMap::with_capacity(allsimple3.len());
                    while let Some(row8) = allsimple3.pop() {
                        entityIdTosimple7.insert(row8.conduit_entity_id.unwrap(), row8);
                    }
                    

    let mut out = Vec::with_capacity(allwrapper1.len());

    while let Some(row0) = allwrapper1.pop() {
        let wrapperEntityId2 = row0.get(\\"conduit_entity_id\\");
        
                    // Extracting simple
                    let extractedsimple9 = match entityIdTosimple7.remove(&row0.get(\\"innard_ptr\\")) {
                        Some(t) => t,
                        None => panic!(\\"did not get an expected innard_ptr\\")
                    };
                    
        out.push(wrapper {
            innard: extractedsimple9,
            conduit_entity_id: Some(wrapperEntityId2)
        })
    }

    
        return Ok(out);
    }
    

            async fn insert_wrapStore(client: &Client, body: &wrapper) -> Result<(), Error> {
                let ret0 = client.query(\\"insert into wrapStore_innard(data) values ($1) RETURNING conduit_entity_id\\", &[&body.innard.data]).await?;
let entId1: i32 = ret0[0].get(0);
client.query(\\"insert into wrapStore(innard_ptr) values ($1)\\", &[ &entId1]).await?;
                return Ok(());
            }
            
                            // OP INTERPRETER
                            

    #[derive(Serialize, Deserialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum Op {
        storeInsertPreviouswrapStore,
storeQuerywrapStore,
returnVariable(usize),
returnPrevious,
savePrevious,
echoVariable(usize),
simpleFieldAccess(simpleField),
wrapperFieldAccess(wrapperField)
    }

    #[derive(Serialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum AnyType<'exec> {
        None,
Err( String),
double(&'exec f64),
Manydouble(&'exec Vec<f64>),
Optionaldouble(&'exec Option<f64>),
float(&'exec f32),
Manyfloat(&'exec Vec<f32>),
Optionalfloat(&'exec Option<f32>),
int32(&'exec i32),
Manyint32(&'exec Vec<i32>),
Optionalint32(&'exec Option<i32>),
int64(&'exec i64),
Manyint64(&'exec Vec<i64>),
Optionalint64(&'exec Option<i64>),
uint32(&'exec i32),
Manyuint32(&'exec Vec<i32>),
Optionaluint32(&'exec Option<i32>),
uint64(&'exec i64),
Manyuint64(&'exec Vec<i64>),
Optionaluint64(&'exec Option<i64>),
bool(&'exec bool),
Manybool(&'exec Vec<bool>),
Optionalbool(&'exec Option<bool>),
string(&'exec String),
Manystring(&'exec Vec<String>),
Optionalstring(&'exec Option<String>),
bytes(&'exec Vec<u8>),
Manybytes(&'exec Vec<Vec<u8>>),
Optionalbytes(&'exec Option<Vec<u8>>),
simple(&'exec simple),
Manysimple(&'exec Vec<simple>),
Optionalsimple(&'exec Option<simple>),
wrapper(&'exec wrapper),
Manywrapper(&'exec Vec<wrapper>),
Optionalwrapper(&'exec Option<wrapper>),
wrapStoreResult( Vec<wrapper>),
querySpec_wrapStore_innard(&'exec querySpec_wrapStore_innard),
ManyquerySpec_wrapStore_innard(&'exec Vec<querySpec_wrapStore_innard>),
OptionalquerySpec_wrapStore_innard(&'exec Option<querySpec_wrapStore_innard>),
querySpec_wrapStore(&'exec querySpec_wrapStore),
ManyquerySpec_wrapStore(&'exec Vec<querySpec_wrapStore>),
OptionalquerySpec_wrapStore(&'exec Option<querySpec_wrapStore>)
    }


    async fn conduit_byte_code_interpreter<'a>(client: &Client, state: &'a mut Vec<AnyType<'a>>, ops: &Vec<Op>) -> impl Responder {
        let mut prev: AnyType= AnyType::None;
        for o in ops {
            prev = match o {
                Op::storeInsertPreviouswrapStore => {
                        match prev {
                            AnyType::wrapper(r) => {
                                match insert_wrapStore(&client, &r).await {
                                    Ok(()) => AnyType::None,
                                    Err(err) => AnyType::Err(err.to_string())
                                }
                            },
                            _ => {
                                println!(\\"invalid insertion type\\");
                                return HttpResponse::BadRequest().finish();
                            }
                        }
                    },
Op::storeQuerywrapStore => {
                        
                            let spec = querySpec_wrapStore {
            innard: querySpec_wrapStore_innard
        };
                            match query_interpreter_wrapStore(&spec, &client).await {
                                Ok(out) => AnyType::wrapStoreResult(out),
                                Err(err) => AnyType::Err(err.to_string())
                            }
                        
                    },
Op::returnVariable(op_param) => {
                        
                    match state.get(*op_param) {
                        Some(data) => match data {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            ,
                        None => {
                            println!(\\"attempting to return a value that doesn't exist\\");
                            return HttpResponse::BadRequest().finish();
                        }
                    }
                    },
Op::returnPrevious => {
                        
                    match prev {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            
                    },
Op::savePrevious => {
                        state.push(prev); AnyType::None
                    },
Op::echoVariable(op_param) => {
                        match state.get(*op_param) {
                        Some(d) => d.clone(),
                        None => AnyType::Err(\\"Echoing variable that does not exist\\".to_string())
                    }
                    },
Op::simpleFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::simple(inside) => match *op_param {
                                    simpleField::simpledataFieldRef => AnyType::Manystring(&inside.data)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    },
Op::wrapperFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::wrapper(inside) => match *op_param {
                                    wrapperField::wrapperinnardFieldRef => AnyType::simple(&inside.innard)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    }
            };

            match prev {
                AnyType::Err(e) => {
                    println!(\\"Error: {}\\", e);
                    return HttpResponse::BadRequest().finish();
                },
                _ => {}  
            };
        }
        return HttpResponse::Ok().json(AnyType::None);

    }

    
                            // FUNCTIONS
                            
        
        async fn insert(data: web::Data<AppData>, input: web::Json<wrapper>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
        let innerInput = input.into_inner();
        state.push(AnyType::wrapper(&innerInput));
        
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.insert_executable).await;
        }
        


        
        async fn get(data: web::Data<AppData>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.get_executable).await;
        }
        
                    
                            //ADDITIONAL
                            
                        #[derive(Serialize, Deserialize, Clone)]
                        enum simpleField {
                            simpledataFieldRef
                        }
                        

                        #[derive(Serialize, Deserialize, Clone)]
                        enum wrapperField {
                            wrapperinnardFieldRef
                        }
                        
                            #[actix_rt::main]
                            async fn main() -> std::io::Result<()> {
                                HttpServer::new(|| {
                                    App::new()
                                        .data_factory(|| make_app_data())
                                        .route(\\"/\\", web::get().to(index))
                                        .route(\\"/insert\\", web::post().to(insert))
.route(\\"/get\\", web::get().to(get))
                                })
                                .bind(\\"0.0.0.0:8080\\")?
                                .run()
                                .await
                            }
                    
                            async fn index(data: web::Data<AppData>) -> impl Responder {
                                let mut rows = match data.client.query(\\"select name, location from cities\\", &[]).await {
                                    Ok(rows) => rows,
                                    Err(err) => panic!(\\"didn't succeed: {}\\", err)
                                };
                            
                                let mut out = Vec::with_capacity(rows.len());
                            
                                while let Some(row) = rows.pop() {
                                    out.push(City {
                                        name: row.get(0),
                                        location: row.get(1)
                                    })
                                }
                                return HttpResponse::Ok().json(out);
                            }
                
                            async fn make_app_data() -> Result<AppData, ()> {
                                let host = match env::var(\\"POSTGRES_SERVICE_HOST\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres location: {}\\", e)
                                };
                                let pwd = match env::var(\\"POSTGRES_PASSWORD\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres password: {}\\", e)
                                };
                            
                                let (client, connection) = match tokio_postgres::connect(&format!(\\"host={} user=postgres password={}\\", host, pwd), NoTls).await {
                                    Ok(out) => out,
                                    Err(e) => panic!(\\"couldn't create connection: {}\\", e)
                                };
                                
                                // The connection object performs the actual communication with the database,
                                // so spawn it off to run on its own.
                                actix_rt::spawn(async move {
                                    if let Err(e) = connection.await {
                                        eprintln!(\\"connection error: {}\\", e);
                                    }
                                });
                                
                                
                                return Ok(AppData {
                                    client: client,
                                    insert_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"echoVariable\\",
    \\"data\\": 0
  },
  {
    \\"kind\\": \\"storeInsertPreviouswrapStore\\"
  }
]\\"#####).unwrap(),
get_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"storeQuerywrapStore\\"
  },
  {
    \\"kind\\": \\"returnPrevious\\"
  }
]\\"#####).unwrap()
                                });
                            }
                            
                        ",
    "name": ".deploy/main/src/main.rs",
  },
]
`;

exports[`struct containing struct containing primitive array: postgres files 1`] = `
Array [
  Object {
    "content": "

                        CREATE TABLE cities (
                            name            varchar(80),
                            location        int
                        );
                
                        
    CREATE TABLE wrapStore_innard (
        data	text[],
conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
PRIMARY KEY(conduit_entity_id)
    );

    CREATE TABLE wrapStore (
        innard_ptr	INT,
conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
FOREIGN KEY(innard_ptr) REFERENCES wrapStore_innard(conduit_entity_id),
PRIMARY KEY(conduit_entity_id)
    );
                        
                        
                        insert into cities(name, location)
                        values ('detroit', 12)",
    "name": ".deploy/postgres/startup/init.sql",
  },
]
`;

exports[`struct containing struct: main files 1`] = `
Array [
  Object {
    "content": "
                            #![allow(non_snake_case)]
                            #![allow(non_camel_case_types)]
                            #![allow(redundant_semicolon)]
                            #![allow(unused_variables)]
                            #![allow(dead_code)]
                            #![allow(unused_imports)]
                            use tokio_postgres::{NoTls, Client};
                            use actix_web::{web, App, HttpResponse, HttpServer, Responder};
                            use actix_rt::System;
                            use std::env;
                            use serde::{Deserialize, Serialize};
                            use tokio_postgres::error::{Error};
                            use std::collections::HashMap;
                
                
                            struct AppData {
                                client: Client,
insert_executable: Vec<Op>,get_executable: Vec<Op>
                            }
                            
                            #[derive(Serialize, Deserialize)]
                            struct City {
                                name: String,
                                location: i32
                            }
                            
                            // STRUCTS
                            
            #[derive(Serialize, Deserialize, Clone)]
            struct simple {
                data: bool,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct wrapper {
                innard: simple,
conduit_entity_id: Option<i32>
            }
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore_innard;
            

            #[derive(Serialize, Deserialize, Clone)]
            struct querySpec_wrapStore {
                innard: querySpec_wrapStore_innard
            }
            
                            // INTERPRETERS
                            
    async fn query_interpreter_wrapStore(querySpec: &querySpec_wrapStore, client: &Client) -> Result<Vec<wrapper>, Error> {
        
    // Gettting all wrapper
    let mut allwrapper1 = client.query(\\"select * from wrapStore \\", &[]).await?;

    
    // Gettting all simple
    let mut allsimple5 = client.query(\\"select * from wrapStore_innard WHERE conduit_entity_id in (select innard_ptr from wrapStore)\\", &[]).await?;

    

    let mut allsimple3 = Vec::with_capacity(allsimple5.len());

    while let Some(row4) = allsimple5.pop() {
        let simpleEntityId6 = row4.get(\\"conduit_entity_id\\");
        
        allsimple3.push(simple {
            data: row4.get(\\"data\\"),
            conduit_entity_id: Some(simpleEntityId6)
        })
    }

    

                    let mut entityIdTosimple7: HashMap<i32, simple> = HashMap::with_capacity(allsimple3.len());
                    while let Some(row8) = allsimple3.pop() {
                        entityIdTosimple7.insert(row8.conduit_entity_id.unwrap(), row8);
                    }
                    

    let mut out = Vec::with_capacity(allwrapper1.len());

    while let Some(row0) = allwrapper1.pop() {
        let wrapperEntityId2 = row0.get(\\"conduit_entity_id\\");
        
                    // Extracting simple
                    let extractedsimple9 = match entityIdTosimple7.remove(&row0.get(\\"innard_ptr\\")) {
                        Some(t) => t,
                        None => panic!(\\"did not get an expected innard_ptr\\")
                    };
                    
        out.push(wrapper {
            innard: extractedsimple9,
            conduit_entity_id: Some(wrapperEntityId2)
        })
    }

    
        return Ok(out);
    }
    

            async fn insert_wrapStore(client: &Client, body: &wrapper) -> Result<(), Error> {
                let ret0 = client.query(\\"insert into wrapStore_innard(data) values ($1) RETURNING conduit_entity_id\\", &[&body.innard.data]).await?;
let entId1: i32 = ret0[0].get(0);
client.query(\\"insert into wrapStore(innard_ptr) values ($1)\\", &[ &entId1]).await?;
                return Ok(());
            }
            
                            // OP INTERPRETER
                            

    #[derive(Serialize, Deserialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum Op {
        storeInsertPreviouswrapStore,
storeQuerywrapStore,
returnVariable(usize),
returnPrevious,
savePrevious,
echoVariable(usize),
simpleFieldAccess(simpleField),
wrapperFieldAccess(wrapperField)
    }

    #[derive(Serialize, Clone)]
    #[serde(tag = \\"kind\\", content= \\"data\\")]
    enum AnyType<'exec> {
        None,
Err( String),
double(&'exec f64),
Manydouble(&'exec Vec<f64>),
Optionaldouble(&'exec Option<f64>),
float(&'exec f32),
Manyfloat(&'exec Vec<f32>),
Optionalfloat(&'exec Option<f32>),
int32(&'exec i32),
Manyint32(&'exec Vec<i32>),
Optionalint32(&'exec Option<i32>),
int64(&'exec i64),
Manyint64(&'exec Vec<i64>),
Optionalint64(&'exec Option<i64>),
uint32(&'exec i32),
Manyuint32(&'exec Vec<i32>),
Optionaluint32(&'exec Option<i32>),
uint64(&'exec i64),
Manyuint64(&'exec Vec<i64>),
Optionaluint64(&'exec Option<i64>),
bool(&'exec bool),
Manybool(&'exec Vec<bool>),
Optionalbool(&'exec Option<bool>),
string(&'exec String),
Manystring(&'exec Vec<String>),
Optionalstring(&'exec Option<String>),
bytes(&'exec Vec<u8>),
Manybytes(&'exec Vec<Vec<u8>>),
Optionalbytes(&'exec Option<Vec<u8>>),
simple(&'exec simple),
Manysimple(&'exec Vec<simple>),
Optionalsimple(&'exec Option<simple>),
wrapper(&'exec wrapper),
Manywrapper(&'exec Vec<wrapper>),
Optionalwrapper(&'exec Option<wrapper>),
wrapStoreResult( Vec<wrapper>),
querySpec_wrapStore_innard(&'exec querySpec_wrapStore_innard),
ManyquerySpec_wrapStore_innard(&'exec Vec<querySpec_wrapStore_innard>),
OptionalquerySpec_wrapStore_innard(&'exec Option<querySpec_wrapStore_innard>),
querySpec_wrapStore(&'exec querySpec_wrapStore),
ManyquerySpec_wrapStore(&'exec Vec<querySpec_wrapStore>),
OptionalquerySpec_wrapStore(&'exec Option<querySpec_wrapStore>)
    }


    async fn conduit_byte_code_interpreter<'a>(client: &Client, state: &'a mut Vec<AnyType<'a>>, ops: &Vec<Op>) -> impl Responder {
        let mut prev: AnyType= AnyType::None;
        for o in ops {
            prev = match o {
                Op::storeInsertPreviouswrapStore => {
                        match prev {
                            AnyType::wrapper(r) => {
                                match insert_wrapStore(&client, &r).await {
                                    Ok(()) => AnyType::None,
                                    Err(err) => AnyType::Err(err.to_string())
                                }
                            },
                            _ => {
                                println!(\\"invalid insertion type\\");
                                return HttpResponse::BadRequest().finish();
                            }
                        }
                    },
Op::storeQuerywrapStore => {
                        
                            let spec = querySpec_wrapStore {
            innard: querySpec_wrapStore_innard
        };
                            match query_interpreter_wrapStore(&spec, &client).await {
                                Ok(out) => AnyType::wrapStoreResult(out),
                                Err(err) => AnyType::Err(err.to_string())
                            }
                        
                    },
Op::returnVariable(op_param) => {
                        
                    match state.get(*op_param) {
                        Some(data) => match data {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            ,
                        None => {
                            println!(\\"attempting to return a value that doesn't exist\\");
                            return HttpResponse::BadRequest().finish();
                        }
                    }
                    },
Op::returnPrevious => {
                        
                    match prev {
                AnyType::None => return HttpResponse::Ok().finish(),
AnyType::Err(output) => return HttpResponse::Ok().json(output),
AnyType::double(output) => return HttpResponse::Ok().json(output),
AnyType::Manydouble(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaldouble(output) => return HttpResponse::Ok().json(output),
AnyType::float(output) => return HttpResponse::Ok().json(output),
AnyType::Manyfloat(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalfloat(output) => return HttpResponse::Ok().json(output),
AnyType::int32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint32(output) => return HttpResponse::Ok().json(output),
AnyType::int64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalint64(output) => return HttpResponse::Ok().json(output),
AnyType::uint32(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint32(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint32(output) => return HttpResponse::Ok().json(output),
AnyType::uint64(output) => return HttpResponse::Ok().json(output),
AnyType::Manyuint64(output) => return HttpResponse::Ok().json(output),
AnyType::Optionaluint64(output) => return HttpResponse::Ok().json(output),
AnyType::bool(output) => return HttpResponse::Ok().json(output),
AnyType::Manybool(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbool(output) => return HttpResponse::Ok().json(output),
AnyType::string(output) => return HttpResponse::Ok().json(output),
AnyType::Manystring(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalstring(output) => return HttpResponse::Ok().json(output),
AnyType::bytes(output) => return HttpResponse::Ok().json(output),
AnyType::Manybytes(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalbytes(output) => return HttpResponse::Ok().json(output),
AnyType::simple(output) => return HttpResponse::Ok().json(output),
AnyType::Manysimple(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalsimple(output) => return HttpResponse::Ok().json(output),
AnyType::wrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Manywrapper(output) => return HttpResponse::Ok().json(output),
AnyType::Optionalwrapper(output) => return HttpResponse::Ok().json(output),
AnyType::wrapStoreResult(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore_innard(output) => return HttpResponse::Ok().json(output),
AnyType::querySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::ManyquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output),
AnyType::OptionalquerySpec_wrapStore(output) => return HttpResponse::Ok().json(output)
            }
            
                    },
Op::savePrevious => {
                        state.push(prev); AnyType::None
                    },
Op::echoVariable(op_param) => {
                        match state.get(*op_param) {
                        Some(d) => d.clone(),
                        None => AnyType::Err(\\"Echoing variable that does not exist\\".to_string())
                    }
                    },
Op::simpleFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::simple(inside) => match *op_param {
                                    simpleField::simpledataFieldRef => AnyType::bool(&inside.data)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    },
Op::wrapperFieldAccess(op_param) => {
                        
                            match prev {
                                AnyType::wrapper(inside) => match *op_param {
                                    wrapperField::wrapperinnardFieldRef => AnyType::simple(&inside.innard)

                                },
                                _ => AnyType::Err(\\"Attempting to reference a field that doesn't exist on current type\\".to_string())
                            }
                                
                            
                    }
            };

            match prev {
                AnyType::Err(e) => {
                    println!(\\"Error: {}\\", e);
                    return HttpResponse::BadRequest().finish();
                },
                _ => {}  
            };
        }
        return HttpResponse::Ok().json(AnyType::None);

    }

    
                            // FUNCTIONS
                            
        
        async fn insert(data: web::Data<AppData>, input: web::Json<wrapper>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
        let innerInput = input.into_inner();
        state.push(AnyType::wrapper(&innerInput));
        
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.insert_executable).await;
        }
        


        
        async fn get(data: web::Data<AppData>) -> impl Responder {
            let mut state: Vec<AnyType> = Vec::with_capacity(0);
            
            return conduit_byte_code_interpreter(&data.client, &mut state, &data.get_executable).await;
        }
        
                    
                            //ADDITIONAL
                            
                        #[derive(Serialize, Deserialize, Clone)]
                        enum simpleField {
                            simpledataFieldRef
                        }
                        

                        #[derive(Serialize, Deserialize, Clone)]
                        enum wrapperField {
                            wrapperinnardFieldRef
                        }
                        
                            #[actix_rt::main]
                            async fn main() -> std::io::Result<()> {
                                HttpServer::new(|| {
                                    App::new()
                                        .data_factory(|| make_app_data())
                                        .route(\\"/\\", web::get().to(index))
                                        .route(\\"/insert\\", web::post().to(insert))
.route(\\"/get\\", web::get().to(get))
                                })
                                .bind(\\"0.0.0.0:8080\\")?
                                .run()
                                .await
                            }
                    
                            async fn index(data: web::Data<AppData>) -> impl Responder {
                                let mut rows = match data.client.query(\\"select name, location from cities\\", &[]).await {
                                    Ok(rows) => rows,
                                    Err(err) => panic!(\\"didn't succeed: {}\\", err)
                                };
                            
                                let mut out = Vec::with_capacity(rows.len());
                            
                                while let Some(row) = rows.pop() {
                                    out.push(City {
                                        name: row.get(0),
                                        location: row.get(1)
                                    })
                                }
                                return HttpResponse::Ok().json(out);
                            }
                
                            async fn make_app_data() -> Result<AppData, ()> {
                                let host = match env::var(\\"POSTGRES_SERVICE_HOST\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres location: {}\\", e)
                                };
                                let pwd = match env::var(\\"POSTGRES_PASSWORD\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres password: {}\\", e)
                                };
                            
                                let (client, connection) = match tokio_postgres::connect(&format!(\\"host={} user=postgres password={}\\", host, pwd), NoTls).await {
                                    Ok(out) => out,
                                    Err(e) => panic!(\\"couldn't create connection: {}\\", e)
                                };
                                
                                // The connection object performs the actual communication with the database,
                                // so spawn it off to run on its own.
                                actix_rt::spawn(async move {
                                    if let Err(e) = connection.await {
                                        eprintln!(\\"connection error: {}\\", e);
                                    }
                                });
                                
                                
                                return Ok(AppData {
                                    client: client,
                                    insert_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"echoVariable\\",
    \\"data\\": 0
  },
  {
    \\"kind\\": \\"storeInsertPreviouswrapStore\\"
  }
]\\"#####).unwrap(),
get_executable: serde_json::from_str(r#####\\"[
  {
    \\"kind\\": \\"storeQuerywrapStore\\"
  },
  {
    \\"kind\\": \\"returnPrevious\\"
  }
]\\"#####).unwrap()
                                });
                            }
                            
                        ",
    "name": ".deploy/main/src/main.rs",
  },
]
`;

exports[`struct containing struct: postgres files 1`] = `
Array [
  Object {
    "content": "

                        CREATE TABLE cities (
                            name            varchar(80),
                            location        int
                        );
                
                        
    CREATE TABLE wrapStore_innard (
        data	boolean NOT NULL,
conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
PRIMARY KEY(conduit_entity_id)
    );

    CREATE TABLE wrapStore (
        innard_ptr	INT,
conduit_entity_id	INT	GENERATED ALWAYS AS IDENTITY,
FOREIGN KEY(innard_ptr) REFERENCES wrapStore_innard(conduit_entity_id),
PRIMARY KEY(conduit_entity_id)
    );
                        
                        
                        insert into cities(name, location)
                        values ('detroit', 12)",
    "name": ".deploy/postgres/startup/init.sql",
  },
]
`;
