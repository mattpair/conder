// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`simple server: main dockerfile 1`] = `
"
FROM rust:1.40 as builder

RUN USER=root cargo new --bin app

WORKDIR /app
# create a new empty shell project

# copy over your manifests just to build dependencies
COPY ./Cargo.lock ./Cargo.lock
COPY ./Cargo.toml ./Cargo.toml

# this build step will cache your dependencies
RUN cargo build --release

# copy the conduit generated source
COPY ./src/main.rs ./src/main.rs

# build for release
RUN rm ./target/release/deps/app*
RUN cargo build --release


FROM debian:buster-slim
RUN apt-get update && rm -rf /var/lib/apt/lists/*
COPY --from=builder /app/target/release/app /usr/local/bin/app
EXPOSE 8080
CMD [\\"app\\"]
"
`;

exports[`simple server: main files 1`] = `
Array [
  Object {
    "content": "
                            #![allow(non_snake_case)]
                            #![allow(non_camel_case_types)]
                            #![allow(redundant_semicolon)]
                            use tokio_postgres::{NoTls, Client};
                            use actix_web::{web, App, HttpResponse, HttpServer, Responder};
                            use std::env;
                            use serde::{Deserialize, Serialize};
                            use tokio_postgres::error::{Error};
                
                
                            struct AppData {
                                client: Client
                            }
                            
                            #[derive(Serialize, Deserialize)]
                            struct City {
                                name: String,
                                location: i32
                            }
                            
                    
                            
                    
                            
                    
                            #[actix_rt::main]
                            async fn main() -> std::io::Result<()> {
                                HttpServer::new(|| {
                                    App::new()
                                        .data_factory(|| make_app_data())
                                        .route(\\"/\\", web::get().to(index))
                                        
                                })
                                .bind(\\"0.0.0.0:8080\\")?
                                .run()
                                .await
                            }
                    
                            async fn index(data: web::Data<AppData>) -> impl Responder {
                                let mut rows = match data.client.query(\\"select name, location from cities\\", &[]).await {
                                    Ok(rows) => rows,
                                    Err(err) => panic!(\\"didn't succeed: {}\\", err)
                                };
                            
                                let mut out = Vec::with_capacity(rows.len());
                            
                                while let Some(row) = rows.pop() {
                                    out.push(City {
                                        name: row.get(0),
                                        location: row.get(1)
                                    })
                                }
                                return HttpResponse::Ok().json(out);
                            }
                
                            async fn make_app_data() -> Result<AppData, ()> {
                                let host = match env::var(\\"POSTGRES_SERVICE_HOST\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres location: {}\\", e)
                                };
                                let pwd = match env::var(\\"POSTGRES_PASSWORD\\") {
                                    Ok(pgloc) => pgloc,
                                    Err(e) => panic!(\\"didn't receive postgres password: {}\\", e)
                                };
                            
                                let (client, connection) = match tokio_postgres::connect(&format!(\\"host={} user=postgres password={}\\", host, pwd), NoTls).await {
                                    Ok(out) => out,
                                    Err(e) => panic!(\\"couldn't create connection: {}\\", e)
                                };
                                
                                // The connection object performs the actual communication with the database,
                                // so spawn it off to run on its own.
                                actix_rt::spawn(async move {
                                    if let Err(e) = connection.await {
                                        eprintln!(\\"connection error: {}\\", e);
                                    }
                                });
                                
                                
                                return Ok(AppData {
                                    client: client,
                                });
                            }
                            
                        ",
    "name": ".deploy/main/src/main.rs",
  },
]
`;

exports[`simple server: postgres files 1`] = `
Object {
  "docker": "
                    FROM postgres:12.3
                    
                    COPY startup/ /docker-entrypoint-initdb.d/
                            ",
  "files": Array [
    Object {
      "content": "

                        CREATE TABLE cities (
                            name            varchar(80),
                            location        int
                        );
                
                        
                        
                        
                        insert into cities(name, location)
                        values ('detroit', 12)",
      "name": ".deploy/postgres/startup/init.sql",
    },
  ],
}
`;
