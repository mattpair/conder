// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`language can declare temp variables 1`] = `
Object {
  "funcs": Map {
    "fff" => Object {
      "computation": Array [
        Object {
          "index": 1,
          "kind": "Save",
          "value": Object {
            "kind": "Bool",
            "value": true,
          },
        },
        Object {
          "index": 2,
          "kind": "Save",
          "value": Object {
            "kind": "Bool",
            "value": false,
          },
        },
        Object {
          "index": 3,
          "kind": "Save",
          "value": Object {
            "field_name": Array [
              Object {
                "index": 1,
                "kind": "Saved",
              },
            ],
            "kind": "GetField",
            "target": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language can overwrite inputs 1`] = `
Object {
  "funcs": Map {
    "fff" => Object {
      "computation": Array [
        Object {
          "kind": "Update",
          "operation": Object {
            "kind": "Bool",
            "value": false,
          },
          "target": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language cannot have a variable with the same name as a function 1`] = `
"In function fff: 
	The symbol fff is already in use"
`;

exports[`language cannot have duplicate variables 1`] = `
"In function fff: 
	The symbol a is already in use"
`;

exports[`language does not allow overwriting constants 1`] = `
"In function fff: 
	Attempting to overwrite constant variable b"
`;

exports[`language globals must be empty objects 1`] = `"Global someVar must be initialized as empty object"`;

exports[`language only allows global constants 1`] = `"Global variable someVar must be const"`;

exports[`language should allow a fixed number of args in functions 1`] = `
Object {
  "funcs": Map {
    "argy" => Object {
      "computation": Array [],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow a global object 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj" => Object {
      "kind": "glob",
      "name": "obj",
    },
  },
}
`;

exports[`language should allow bools, numbers, and strings 1`] = `
Array [
  Object {
    "args": Object {
      "kind": "args",
      "lastArg": Object {
        "kind": "name",
        "name": "a",
      },
      "leadingArgs": Array [],
    },
    "body": Object {
      "kind": "executable",
      "value": Array [
        Object {
          "kind": "executable_$0",
          "value": Object {
            "kind": "expression",
            "methods": Array [],
            "root": Object {
              "kind": "bool",
              "value": "true",
            },
          },
        },
        Object {
          "kind": "executable_$0",
          "value": Object {
            "kind": "expression",
            "methods": Array [],
            "root": Object {
              "kind": "bool",
              "value": "false",
            },
          },
        },
        Object {
          "kind": "executable_$0",
          "value": Object {
            "kind": "expression",
            "methods": Array [],
            "root": Object {
              "kind": "num",
              "value": "12",
            },
          },
        },
        Object {
          "kind": "executable_$0",
          "value": Object {
            "kind": "expression",
            "methods": Array [],
            "root": Object {
              "kind": "num",
              "value": "-12.12",
            },
          },
        },
        Object {
          "kind": "executable_$0",
          "value": Object {
            "kind": "expression",
            "methods": Array [],
            "root": Object {
              "kind": "str",
              "value": "hello world",
            },
          },
        },
        Object {
          "kind": "executable_$0",
          "value": Object {
            "kind": "expression",
            "methods": Array [],
            "root": Object {
              "fields": Object {
                "kind": "fields",
                "value": Array [],
              },
              "kind": "obj",
            },
          },
        },
      ],
    },
    "kind": "func",
    "name": Object {
      "kind": "name",
      "name": "fff",
    },
  },
]
`;

exports[`language should allow empty public functions 1`] = `
Object {
  "funcs": Map {
    "doSomething" => Object {
      "computation": Array [],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow getting of nested keys 1`] = `
Object {
  "funcs": Map {
    "fff" => Object {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "field_name": Array [
              Object {
                "kind": "String",
                "value": "field",
              },
            ],
            "kind": "GetField",
            "target": Object {
              "field_name": Array [
                Object {
                  "index": 0,
                  "kind": "Saved",
                },
              ],
              "kind": "GetField",
              "target": Object {
                "kind": "GlobalObject",
                "name": "gg",
              },
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
}
`;

exports[`language should allow many global objects 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj1" => Object {
      "kind": "glob",
      "name": "obj1",
    },
    "obj2" => Object {
      "kind": "glob",
      "name": "obj2",
    },
  },
}
`;

exports[`language should allow return statements within functions 1`] = `
Object {
  "funcs": Map {
    "returny" => Object {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": undefined,
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow setting of keys on a global object 1`] = `
Object {
  "funcs": Map {
    "fff" => Object {
      "computation": Array [
        Object {
          "kind": "Update",
          "operation": Object {
            "field_name": Array [
              Object {
                "kind": "String",
                "value": "abc",
              },
            ],
            "kind": "SetField",
            "value": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
          "target": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
        Object {
          "kind": "Update",
          "operation": Object {
            "field_name": Array [
              Object {
                "index": 0,
                "kind": "Saved",
              },
            ],
            "kind": "SetField",
            "value": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
          "target": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
        Object {
          "kind": "Update",
          "operation": Object {
            "field_name": Array [
              Object {
                "kind": "String",
                "value": "abc",
              },
            ],
            "kind": "SetField",
            "value": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
          "target": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
}
`;
